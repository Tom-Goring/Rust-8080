use crate::i8080::cpu::Byte;
use crate::i8080::cpu::Word;

pub fn op_name(opcode: Byte, following_byte: Byte, following_word: Word) -> String {
    match opcode {
        0x00 | 0x08 | 0x10 | 0x18 | 0x20 | 0x28 | 0x30 | 0x38 => "NOP".into(),
        0x01 => format!("LXI B, ${:04x}", following_word),
        0x02 => "STAX B".into(),
        0x03 => "INX B".into(),
        0x04 => "INR B".into(),
        0x05 => "DCR B".into(),
        0x06 => format!("MVI B, ${:02x}", following_byte),
        0x07 => "RLC".into(),
        0x09 => "DAD B".into(),
        0x0a => "LDAX B".into(),
        0x0b => "DCX B".into(),
        0x0c => "INR C".into(),
        0x0d => "DCR C".into(),
        0x0e => format!("MVI C, ${:02x}", following_byte),
        0x0f => "RRC".into(),
        0x11 => format!("LXI D, ${:04x}", following_word),
        0x12 => "STAX D".into(),
        0x13 => "INX D".into(),
        0x14 => "INR D".into(),
        0x15 => "DCR D".into(),
        0x16 => format!("MVI D, ${:02x}", following_byte),
        0x17 => "RAL".into(),
        0x19 => "DAD D".into(),
        0x1a => "LDAX D".into(),
        0x1b => "DCX D".into(),
        0x1c => "INR E".into(),
        0x1d => "DCR E".into(),
        0x1e => format!("MVI E, ${:02x}", following_byte),
        0x1f => "RAR".into(),
        0x21 => format!("LXI H, ${:04x}", following_word),
        0x22 => format!("SHLD ${:04x}", following_word),
        0x23 => "INX H".into(),
        0x24 => "INR H".into(),
        0x25 => "DCR H".into(),
        0x26 => format!("MVI H, ${:02x}", following_byte),
        0x27 => "DAA".into(),
        0x29 => "DAD H".into(),
        0x2a => format!("LHLD ${:04x}", following_word),
        0x2b => "DCX H".into(),
        0x2c => "INR L".into(),
        0x2d => "DCR L".into(),
        0x2e => format!("MVI L, ${:02x}", following_byte),
        0x2f => "CMA".into(),
        0x31 => format!("LXI SP, ${:04x}", following_word),
        0x32 => format!("STA ${:04x}", following_word),
        0x33 => "INX SP".into(),
        0x34 => "INR M".into(),
        0x35 => "DCR M".into(),
        0x36 => format!("MVI M, ${:02x}", following_byte),
        0x37 => "STC".into(),
        0x39 => "DAD SP".into(),
        0x3a => format!("LDA ${:04x}", following_word),
        0x3b => "DCX SP".into(),
        0x3c => "INR A".into(),
        0x3d => "DCR A".into(),
        0x3e => format!("MVI A, ${:02x}", following_byte),
        0x3f => "CMC".into(),
        0x40 => "MOV B,B".into(),
        0x41 => "MOV B,C".into(),
        0x42 => "MOV B,D".into(),
        0x43 => "MOV B,E".into(),
        0x44 => "MOV B,H".into(),
        0x45 => "MOV B,L".into(),
        0x46 => "MOV B,M".into(),
        0x47 => "MOV B,A".into(),
        0x48 => "MOV C,B".into(),
        0x49 => "MOV C,C".into(),
        0x4a => "MOV C,D".into(),
        0x4b => "MOV C,E".into(),
        0x4c => "MOV C,H".into(),
        0x4d => "MOV C,L".into(),
        0x4e => "MOV C,M".into(),
        0x4f => "MOV C,A".into(),
        0x50 => "MOV D,B".into(),
        0x51 => "MOV D,C".into(),
        0x52 => "MOV D,D".into(),
        0x53 => "MOV D,E".into(),
        0x54 => "MOV D,H".into(),
        0x55 => "MOV D,L".into(),
        0x56 => "MOV D,M".into(),
        0x57 => "MOV D,A".into(),
        0x58 => "MOV E,B".into(),
        0x59 => "MOV E,C".into(),
        0x5a => "MOV E,D".into(),
        0x5b => "MOV E,E".into(),
        0x5c => "MOV E,H".into(),
        0x5d => "MOV E,L".into(),
        0x5e => "MOV E,M".into(),
        0x5f => "MOV E,A".into(),
        0x60 => "MOV H,B".into(),
        0x61 => "MOV H,C".into(),
        0x62 => "MOV H,D".into(),
        0x63 => "MOV H,E".into(),
        0x64 => "MOV H,H".into(),
        0x65 => "MOV H,L".into(),
        0x66 => "MOV H,M".into(),
        0x67 => "MOV H,A".into(),
        0x68 => "MOV L,B".into(),
        0x69 => "MOV L,C".into(),
        0x6a => "MOV L,D".into(),
        0x6b => "MOV L,E".into(),
        0x6c => "MOV L,H".into(),
        0x6d => "MOV L,L".into(),
        0x6e => "MOV L,M".into(),
        0x6f => "MOV L,A".into(),
        0x70 => "MOV M,B".into(),
        0x71 => "MOV M,C".into(),
        0x72 => "MOV M,D".into(),
        0x73 => "MOV M,E".into(),
        0x74 => "MOV M,H".into(),
        0x75 => "MOV M,L".into(),
        0x76 => "HLT".into(),
        0x77 => "MOV M,A".into(),
        0x78 => "MOV A,B".into(),
        0x79 => "MOV A,C".into(),
        0x7a => "MOV A,D".into(),
        0x7b => "MOV A,E".into(),
        0x7c => "MOV A,H".into(),
        0x7d => "MOV A,L".into(),
        0x7e => "MOV A,M".into(),
        0x7f => "MOV A,A".into(),
        0x80 => "ADD B".into(),
        0x81 => "ADD C".into(),
        0x82 => "ADD D".into(),
        0x83 => "ADD E".into(),
        0x84 => "ADD H".into(),
        0x85 => "ADD L".into(),
        0x86 => "ADD M".into(),
        0x87 => "ADD A".into(),
        0x88 => "ADC B".into(),
        0x89 => "ADC C".into(),
        0x8a => "ADC D".into(),
        0x8b => "ADC E".into(),
        0x8c => "ADC H".into(),
        0x8d => "ADC L".into(),
        0x8e => "ADC M".into(),
        0x8f => "ADC A".into(),
        0x90 => "SUB B".into(),
        0x91 => "SUB C".into(),
        0x92 => "SUB D".into(),
        0x93 => "SUB E".into(),
        0x94 => "SUB H".into(),
        0x95 => "SUB L".into(),
        0x96 => "SUB M".into(),
        0x97 => "SUB A".into(),
        0x98 => "SBB B".into(),
        0x99 => "SBB C".into(),
        0x9a => "SBB D".into(),
        0x9b => "SBB E".into(),
        0x9c => "SBB H".into(),
        0x9d => "SBB L".into(),
        0x9e => "SBB M".into(),
        0x9f => "SBB A".into(),
        0xa0 => "ANA B".into(),
        0xa1 => "ANA C".into(),
        0xa2 => "ANA D".into(),
        0xa3 => "ANA E".into(),
        0xa4 => "ANA H".into(),
        0xa5 => "ANA L".into(),
        0xa6 => "ANA M".into(),
        0xa7 => "ANA A".into(),
        0xa8 => "XRA B".into(),
        0xa9 => "XRA C".into(),
        0xaa => "XRA D".into(),
        0xab => "XRA E".into(),
        0xac => "XRA H".into(),
        0xad => "XRA L".into(),
        0xae => "XRA M".into(),
        0xaf => "XRA A".into(),
        0xb0 => "ORA B".into(),
        0xb1 => "ORA C".into(),
        0xb2 => "ORA D".into(),
        0xb3 => "ORA E".into(),
        0xb4 => "ORA H".into(),
        0xb5 => "ORA L".into(),
        0xb6 => "ORA M".into(),
        0xb7 => "ORA A".into(),
        0xb8 => "CMP B".into(),
        0xb9 => "CMP C".into(),
        0xba => "CMP D".into(),
        0xbb => "CMP E".into(),
        0xbc => "CMP H".into(),
        0xbd => "CMP L".into(),
        0xbe => "CMP M".into(),
        0xbf => "CMP A".into(),
        0xc0 => "RNZ".into(),
        0xc1 => "POP B".into(),
        0xc2 => format!("JNZ ${:04x}", following_word),
        0xc3 | 0xcb => format!("JMP ${:04x}", following_word),
        0xc4 => format!("CNZ ${:04x}", following_word),
        0xc5 => "PUSH B".into(),
        0xc6 => format!("ADI ${:02x}", following_byte),
        0xc7 => "RST 0".into(),
        0xc8 => "RZ".into(),
        0xc9 | 0xd9 => "RET".into(),
        0xca => format!("JZ ${:04x}", following_word),
        0xcc => format!("CZ ${:04x}", following_word),
        0xcd | 0xdd | 0xed | 0xfd => format!("CALL ${:04x}", following_word),
        0xce => format!("ACI ${:02x}", following_byte),
        0xcf => "RST 1".into(),
        0xd0 => "RNC".into(),
        0xd1 => "POP D".into(),
        0xd2 => format!("JNC ${:04x}", following_word),
        0xd3 => format!("OUT ${:02x}", following_byte),
        0xd4 => format!("CNC ${:04x}", following_word),
        0xd5 => "PUSH D".into(),
        0xd6 => format!("SUI ${:02x}", following_byte),
        0xd7 => "RST 2".into(),
        0xd8 => "RC".into(),
        0xda => format!("JC ${:04x}", following_word),
        0xdb => format!("IN ${:02x}", following_byte),
        0xdc => format!("CC ${:04x}", following_word),
        0xde => "SBI D8".into(),
        0xdf => "RST 3".into(),
        0xe0 => "RPO".into(),
        0xe1 => "POP H".into(),
        0xe2 => format!("JPO ${:04x}", following_word),
        0xe3 => "XTHL".into(),
        0xe4 => format!("CPO ${:04x}", following_word),
        0xe5 => "PUSH H".into(),
        0xe6 => format!("ANI ${:02x}", following_byte),
        0xe7 => "RST 4".into(),
        0xe8 => "RPE".into(),
        0xe9 => "PCHL".into(),
        0xea => format!("JPE ${:04x}", following_word),
        0xeb => "XCHG".into(),
        0xec => format!("CPE ${:04x}", following_word),
        0xee => format!("XRI ${:02x}", following_byte),
        0xef => "RST 5".into(),
        0xf0 => "RP".into(),
        0xf1 => "POP AF".into(),
        0xf2 => format!("JP ${:04x}", following_word),
        0xf3 => "DI".into(),
        0xf4 => format!("CP ${:04x}", following_word),
        0xf5 => "PUSH AF".into(),
        0xf6 => format!("ORI ${:02x}", following_byte),
        0xf7 => "RST 6".into(),
        0xf8 => "RM".into(),
        0xf9 => "SPHL".into(),
        0xfa => format!("JM ${:04x}", following_word),
        0xfb => "EI".into(),
        0xfc => format!("CM ${:04x}", following_word),
        0xfe => format!("CPI ${:02x}", following_byte),
        0xff => "RST 7".into(),
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::i8080;

    #[test]
    fn test_disassembler() {
        let mut cpu = i8080::cpu::CPU::new();

        for x in 0..0xFE {
            cpu.memory[x] = x as u8;
        }

        for x in 0..0xFE {
            op_name(x, 0, 0);
        }
    }
}